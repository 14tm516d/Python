練習問題 10.1 
入れ子になっている整数の全要素の総和を求める関数nested_sum を作成せよ

def nested_sum(nest):
	t = 0
	for x in nest:
		if(type(x) == int):
			t += x
		elif(type(x) == list):
			t += nested_sum(x)
	return t

a = [1,2,3,4,[5,6],7,8,9,10]
print nested_sum(a)

実行結果
55

練習問題 10.2 
関数capitalize_all を使って、入れ子の文字列リストを受け取り文字
列の全ての語頭を大文字に写像する関数capitalize_nested を作成せよ。

def capitalize_all(t):
	res = []
	for s in t:
		res.append(s.capitalize())
	return res

リスト内包表記を用いると
def capitalize_all(t):
	return [s.capitalize() for s in t]

def capitalize_nested(nest):
	res = capitalize_all(nest)
	for x in res:
		if(type(x) == str):
			x.capitalize()
		elif(type(x) == list):
			for y in x:
				y.capitalize()
	return res

b = ["abc","hike","kisk"]
print capitalize_nested(b)

実行結果
['Abc', 'Hike', 'Kisk']


練習問題 10.3
 整数値のリストを引数として受け取り、累積をリストとして返す関数を作成せよ。
ここで累積リストとは、新しいリストのi 番目の要素はオリジナルのリストの最
初からi+1 個の要素の総和である。
例えば、[1, 2, 3]の累積リストは[1, 3, 6]である。


def total_list(integer):
	t = 0
	res = []
	for i in integer:
		i = t + i
		t = i
		res.append(i)
	return res

a = [1,2,3,4,5,6,7,8,9,10]
print total_list(a)


実行結果
[1, 3, 6, 10, 15, 21, 28, 36, 45, 55]

練習問題 10.4 
リストを引数として受け取りそのリストの先頭と最後尾の要素を削除し
た新しいリストを返す関数middle を作成せよ。middle([1,2,3,4])は[2,3]を返すわけである。

def middle(a):
	res = []
	for i in a[1:-2]:
		res.append(i)
	return res

a = [1,2,3,4,5,6,7,8,9,10]
print middle(a)

実行結果
[2, 3, 4, 5, 6, 7, 8, 9]

def middle2(a):
	t1 = a[:]
	t1.pop(0)
	t1.pop()
	return t1


練習問題 10.5 
リストを引数として受け取り、先頭と最後尾の要素を削除する修正をその
リストに施す関数chop を作成せよ。戻り値はNone である。

def chop(a):
	del a[:1]
	del a[-1:]

10.13 練習問題
練習問題 10.6 
リストを引数として受け取り、そのリストが昇順にソートされているとTrue を、
それ以外はFalse を返す関数is_sorted 作成せよ。関係演算子<、>等は使えるものとする。
例を示すと、is_sorted([1,2,3])はTrue、is_sorted(['b','a'])はFalse を返す。

def is_sorted(a):
	k = 0
	for i in a:
		for j in a[k:]:
			if(j < i):
				return False
		k += 1
	return True

print is_sorted([1,2,3])
print is_sorted(['b','a'])

実行結果
True
False

練習問題 10.7 
二つの単語が一つの単語の文字の入れ替えで他方の単語になるとき、二つの単語はアナグラムであると言う。
二つの単語を引数として受け取りそれらがアナグラムであるとTrue を返す関数is_anagram を作成せよ。

def is_anagram(word1,word2):
	k = 0
	for i in word1:
		if(i != word2[k]):
			index = word1[k]
			for j in word1[k+1:]:
				if(j != word2[k+1] and word2[k+1] == index and word1[k+2:] == word2[k+2:]):
					return True
				k += 1
			return False
		k += 1
	return False

print is_anagram("abcdef","abedcf")

実行結果
True